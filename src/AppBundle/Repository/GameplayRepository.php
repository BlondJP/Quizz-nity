<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Gameplay;
use AppBundle\Entity\Quiz;
use AppBundle\Entity\User;

/**
 * GameplayRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameplayRepository extends EntityRepository {

    public function getThreeBestGames($quizId) {
        $query = $this->createQueryBuilder('p')
                ->where("p.quiz = $quizId")
                ->addOrderBy('p.score', 'DESC')
                ->addOrderBy('p.timeOfTheGame', 'ASC')
                //->orderBy('p.timeOfTheGame ASC, p.score DESC')
                ->getQuery();
        //dump($query); die;

        $games = $query->getResult();
        $bestGames = array_slice($games, 0, 3);
        return $bestGames;
    }

    public function getAllGamesOfAUser($user) {
        return $this->findByUser($user);
    }

    public function startGame($quizId, $userId) {
        # Créer une nouvelle partie
        $game = new Gameplay();
        $quiz = $this->getEntityManager()->getRepository('AppBundle:Quiz')->findOneById($quizId);
        $user = $this->getEntityManager()->getRepository('AppBundle:User')->findOneById($userId);
        $game->setQuiz($quiz);
        $game->setUser($user);
        $game->setBeginAt(new \DateTime());

        # ecriture en bdd
        $em = $this->getEntityManager();
        $em->persist($game);
        $em->flush();

        # On return le partie ID
        return $game->getId();
    }

    public function writeScore($gameId, $score) {
        # Récupérer partieId en session
        $game = $this->find($gameId);
        $game->setScore($score);

        # ecriture en bdd
        $em = $this->getEntityManager();
        $em->persist($game);
        $em->flush();
    }

    public function endGame($gameId) {
        # Récupérer partieId en session
        /** @var Partie $game */
        $game = $this->find($gameId);
        $game->setEndAt(new \DateTime());

        if ($game->getBeginAt() && $game->getEndAt()) {
            # Cas normal, on a les 2 dates. # on fait la difference entre début de partie et fin de partie
            $timeOfTheGame = $game->getEndAt()->diff($game->getBeginAt());
            $numberOfSeconds = intval($timeOfTheGame->format('%s')) + intval($timeOfTheGame->format('%i')) * 60 + intval($timeOfTheGame->format('%h')) * 3600;
            $game->setTimeOfTheGame($numberOfSeconds);

            # ecriture en bdd
            $em = $this->getEntityManager();
            $em->persist($game);
            $em->flush();
        } else {
            # cas d'erreur ou il manquerait l'une des 2 dates
            die('erreur dans le time');
        }
    }

}
